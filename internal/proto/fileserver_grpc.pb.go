// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileServerHandlerClient is the client API for FileServerHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileServerHandlerClient interface {
	Upload(ctx context.Context, opts ...grpc.CallOption) (FileServerHandler_UploadClient, error)
}

type fileServerHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileServerHandlerClient(cc grpc.ClientConnInterface) FileServerHandlerClient {
	return &fileServerHandlerClient{cc}
}

func (c *fileServerHandlerClient) Upload(ctx context.Context, opts ...grpc.CallOption) (FileServerHandler_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &FileServerHandler_ServiceDesc.Streams[0], "/fileserver.FileServerHandler/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &fileServerHandlerUploadClient{stream}
	return x, nil
}

type FileServerHandler_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*UploadStatus, error)
	grpc.ClientStream
}

type fileServerHandlerUploadClient struct {
	grpc.ClientStream
}

func (x *fileServerHandlerUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fileServerHandlerUploadClient) CloseAndRecv() (*UploadStatus, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadStatus)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServerHandlerServer is the server API for FileServerHandler service.
// All implementations should embed UnimplementedFileServerHandlerServer
// for forward compatibility
type FileServerHandlerServer interface {
	Upload(FileServerHandler_UploadServer) error
}

// UnimplementedFileServerHandlerServer should be embedded to have forward compatible implementations.
type UnimplementedFileServerHandlerServer struct {
}

func (UnimplementedFileServerHandlerServer) Upload(FileServerHandler_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}

// UnsafeFileServerHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileServerHandlerServer will
// result in compilation errors.
type UnsafeFileServerHandlerServer interface {
	mustEmbedUnimplementedFileServerHandlerServer()
}

func RegisterFileServerHandlerServer(s grpc.ServiceRegistrar, srv FileServerHandlerServer) {
	s.RegisterService(&FileServerHandler_ServiceDesc, srv)
}

func _FileServerHandler_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FileServerHandlerServer).Upload(&fileServerHandlerUploadServer{stream})
}

type FileServerHandler_UploadServer interface {
	SendAndClose(*UploadStatus) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type fileServerHandlerUploadServer struct {
	grpc.ServerStream
}

func (x *fileServerHandlerUploadServer) SendAndClose(m *UploadStatus) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fileServerHandlerUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FileServerHandler_ServiceDesc is the grpc.ServiceDesc for FileServerHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileServerHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fileserver.FileServerHandler",
	HandlerType: (*FileServerHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _FileServerHandler_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "internal/proto/fileserver.proto",
}
